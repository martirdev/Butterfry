generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Images {
  id               String         @id @default(uuid())
  url              String
  productVersionId String
  productVersion   ProductVersion @relation(fields: [productVersionId], references: [id])
}

model Category {
  id                 String           @id @default(uuid())
  name               String
  parentCategoryId   String?
  parentCategory     Category?        @relation("Category", fields: [parentCategoryId], references: [id])
  childrenCategories Category[]       @relation("Category")
  productVersions    ProductVersion[]
}

model ParamValues {
  id              String           @id @default(uuid())
  name            String
  value           String
  productVersions ProductVersion[] @relation("ParamValuesToProductVersion")
}

model Product {
  id                  String                @id @default(uuid())
  count               Int
  userId              String
  createdAt           DateTime              @default(now())
  user                User                  @relation(fields: [userId], references: [id])
  versions            ProductVersion[]
  productCountHistory ProductCountHistory[]
}

model ProductCountHistory {
  id        String  @id @default(uuid())
  value     Int
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model ProductVersion {
  id            String                   @id @default(uuid())
  categoryId    String?
  productId     String
  createdAt     DateTime                 @default(now())
  name          String
  description   String
  price         Float
  images        Images[]
  orderVersions OrderVersionOnProducts[]
  category      Category?                @relation(fields: [categoryId], references: [id])
  product       Product                  @relation(fields: [productId], references: [id])
  params        ParamValues[]            @relation("ParamValuesToProductVersion")
}

model Order {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  userId        String
  customerId    String
  orderVersions OrderVersion[]
  comments      Comment[]
  user          User           @relation(fields: [userId], references: [id])
  customer      Customer       @relation(fields: [customerId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  orderId   String
  text      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  CREATED
  IN_PROCESS
  NEED_INFO
  READY_TO_DELIVERY
  IN_DELIVERY
  COMPLETED
  CANCELED
  REFUND
}

model OrderVersion {
  id        String                   @id @default(uuid())
  createdAt DateTime                 @default(now())
  orderId   String
  address   String
  status    OrderStatus
  products  OrderVersionOnProducts[]
  order     Order                    @relation(fields: [orderId], references: [id])
}

model OrderVersionOnProducts {
  orderVersionId String
  orderVersion   OrderVersion   @relation(fields: [orderVersionId], references: [id])
  productId      String
  product        ProductVersion @relation(fields: [productId], references: [id])
  amount         Int

  @@id([orderVersionId, productId])
}

model Customer {
  id         String  @id @default(uuid())
  firstName  String
  secondName String
  thirdName  String?
  contact    String
  userId     String
  order      Order[]
  user       User    @relation(fields: [userId], references: [id])
}

model User {
  id        String     @id @default(uuid())
  yandex_id String
  name      String
  surname   String
  avatar    String?
  products  Product[]
  sessions  Session[]
  orders    Order[]
  customers Customer[]
  comments  Comment[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
