generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Images {
  id               String         @id @default(uuid())
  url              String
  productVersionId String
  productVersion   ProductVersion @relation(fields: [productVersionId], references: [id])
}

model ParamValues {
  id              String           @id @default(uuid())
  name            String
  value           String
  productVersions ProductVersion[] @relation("ParamValuesToProductVersion")
}

model Product {
  id                  String                @id @default(uuid())
  projectId           String
  createdAt           DateTime              @default(now())
  project             Project               @relation(fields: [projectId], references: [id])
  versions            ProductVersion[]
  productCountHistory ProductCountHistory[]
}

model ProductCountHistory {
  id        String  @id @default(uuid())
  value     Int
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model ProductVersion {
  id            String                   @id @default(uuid())
  userId        String
  productId     String
  createdAt     DateTime                 @default(now())
  name          String
  description   String
  price         Float
  images        Images[]
  orderVersions OrderVersionOnProducts[]
  params        ParamValues[]            @relation("ParamValuesToProductVersion")
  product       Product                  @relation(fields: [productId], references: [id])
  user          User                     @relation(fields: [userId], references: [id])
}

model Order {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  projectId     String
  customerId    String
  orderVersions OrderVersion[]
  comments      Comment[]
  customer      Customer       @relation(fields: [customerId], references: [id])
  project       Project        @relation(fields: [projectId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  orderId   String
  text      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  CREATED
  IN_PROCESS
  NEED_INFO
  READY_TO_DELIVERY
  IN_DELIVERY
  COMPLETED
  CANCELED
  REFUND
}

model OrderVersion {
  id        String                   @id @default(uuid())
  userId    String
  orderId   String
  createdAt DateTime                 @default(now())
  address   String
  total     Float                    @default(0)
  status    OrderStatus
  products  OrderVersionOnProducts[]
  order     Order                    @relation(fields: [orderId], references: [id])
  user      User                     @relation(fields: [userId], references: [id])
}

model OrderVersionOnProducts {
  orderVersionId String
  orderVersion   OrderVersion   @relation(fields: [orderVersionId], references: [id])
  productId      String
  product        ProductVersion @relation(fields: [productId], references: [id])
  amount         Int

  @@id([orderVersionId, productId])
}

model Customer {
  id         String  @id @default(uuid())
  projectId  String
  userId     String
  firstName  String
  secondName String
  thirdName  String?
  contact    String
  orders     Order[]
  user       User    @relation(fields: [userId], references: [id])
  project    Project @relation(fields: [projectId], references: [id])
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}

model Project {
  id              String            @id @default(uuid())
  name            String
  usersOnProjects UsersOnProjects[]
  Product         Product[]
  Order           Order[]
  Customer        Customer[]
}

model UsersOnProjects {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  assignedAt DateTime @default(now())
  role       Role[]

  @@id([userId, projectId])
}

model User {
  id              String            @id @default(uuid())
  yandex_id       String
  name            String
  surname         String
  avatar          String?
  sessions        Session[]
  productVersions ProductVersion[]
  orderVersions   OrderVersion[]
  customers       Customer[]
  comments        Comment[]
  usersOnProjects UsersOnProjects[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
