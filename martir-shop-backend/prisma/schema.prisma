generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Images {
  id               String         @id @default(uuid())
  url              String
  productVersionId String
  productVersion   ProductVersion @relation(fields: [productVersionId], references: [id])
}

model Category {
  id                 String           @id @default(uuid())
  name               String
  parentCategoryId   String?
  parentCategory     Category?        @relation("Category", fields: [parentCategoryId], references: [id])
  childrenCategories Category[]       @relation("Category")
  productVersions    ProductVersion[]
}

model ParamValues {
  id              String           @id @default(uuid())
  name            String
  value           String
  productVersions ProductVersion[] @relation("ParamValuesToProductVersion")
}

model Product {
  id                  String                @id @default(uuid())
  count               Int
  userId              String
  createdAt           DateTime              @default(now())
  user                User                  @relation(fields: [userId], references: [id])
  versions            ProductVersion[]
  productCountHistory ProductCountHistory[]
}

model ProductCountHistory {
  id        String  @id @default(uuid())
  value     Int
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model ProductVersion {
  id          String        @id @default(uuid())
  categoryId  String?
  productId   String
  name        String
  description String
  price       Float
  createdAt   DateTime      @default(now())
  images      Images[]
  category    Category?     @relation(fields: [categoryId], references: [id])
  product     Product       @relation(fields: [productId], references: [id])
  params      ParamValues[] @relation("ParamValuesToProductVersion")
}

model User {
  id        String    @id @default(uuid())
  yandex_id String
  name      String
  surname   String
  avatar    String?
  products  Product[]
  sessions  Session[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
